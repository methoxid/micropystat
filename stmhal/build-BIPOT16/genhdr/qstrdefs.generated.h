// This file was automatically generated by makeqstrdata.py

Q(_star_, (const byte*)"\x8f\xb5\x01\x00" "*")
Q(__build_class__, (const byte*)"\x42\x88\x0f\x00" "__build_class__")
Q(__class__, (const byte*)"\x2b\xc5\x09\x00" "__class__")
Q(__doc__, (const byte*)"\x2d\xac\x07\x00" "__doc__")
Q(__import__, (const byte*)"\x38\x3e\x0a\x00" "__import__")
Q(__init__, (const byte*)"\x5f\xa5\x08\x00" "__init__")
Q(__new__, (const byte*)"\x79\x15\x07\x00" "__new__")
Q(__locals__, (const byte*)"\x7b\x6a\x0a\x00" "__locals__")
Q(__main__, (const byte*)"\x8e\x13\x08\x00" "__main__")
Q(__module__, (const byte*)"\xff\x30\x0a\x00" "__module__")
Q(__name__, (const byte*)"\xe2\x38\x08\x00" "__name__")
Q(__next__, (const byte*)"\x02\x73\x08\x00" "__next__")
Q(__qualname__, (const byte*)"\x6b\x00\x0c\x00" "__qualname__")
Q(__path__, (const byte*)"\xc8\x23\x08\x00" "__path__")
Q(__repl_print__, (const byte*)"\x00\xbb\x0e\x00" "__repl_print__")
Q(__file__, (const byte*)"\x03\x54\x08\x00" "__file__")
Q(__bool__, (const byte*)"\x2b\x65\x08\x00" "__bool__")
Q(__contains__, (const byte*)"\xc6\x5f\x0c\x00" "__contains__")
Q(__enter__, (const byte*)"\x6d\xba\x09\x00" "__enter__")
Q(__exit__, (const byte*)"\x45\xf8\x08\x00" "__exit__")
Q(__len__, (const byte*)"\xe2\xb0\x07\x00" "__len__")
Q(__iter__, (const byte*)"\xcf\x32\x08\x00" "__iter__")
Q(__getitem__, (const byte*)"\x26\x39\x0b\x00" "__getitem__")
Q(__setitem__, (const byte*)"\x32\x3e\x0b\x00" "__setitem__")
Q(__delitem__, (const byte*)"\xfd\x35\x0b\x00" "__delitem__")
Q(__add__, (const byte*)"\xc4\x82\x07\x00" "__add__")
Q(__sub__, (const byte*)"\x21\x09\x07\x00" "__sub__")
Q(__repr__, (const byte*)"\x10\x0b\x08\x00" "__repr__")
Q(__str__, (const byte*)"\xd0\xcd\x07\x00" "__str__")
Q(__getattr__, (const byte*)"\x40\xf8\x0b\x00" "__getattr__")
Q(__del__, (const byte*)"\x68\x37\x07\x00" "__del__")
Q(__call__, (const byte*)"\xa7\xf9\x08\x00" "__call__")
Q(__lt__, (const byte*)"\x5d\x68\x06\x00" "__lt__")
Q(__gt__, (const byte*)"\xb6\x82\x06\x00" "__gt__")
Q(__eq__, (const byte*)"\x71\x3e\x06\x00" "__eq__")
Q(__le__, (const byte*)"\xcc\x13\x06\x00" "__le__")
Q(__ge__, (const byte*)"\xa7\x46\x06\x00" "__ge__")
Q(micropython, (const byte*)"\x0b\x7c\x0b\x00" "micropython")
Q(bytecode, (const byte*)"\x22\x7d\x08\x00" "bytecode")
Q(const, (const byte*)"\xc0\xff\x05\x00" "const")
Q(native, (const byte*)"\x84\x0b\x06\x00" "native")
Q(viper, (const byte*)"\x5d\x23\x05\x00" "viper")
Q(uint, (const byte*)"\xe3\x3d\x04\x00" "uint")
Q(ptr, (const byte*)"\x53\x70\x03\x00" "ptr")
Q(ptr8, (const byte*)"\x8b\x7a\x04\x00" "ptr8")
Q(ptr16, (const byte*)"\xf4\xca\x05\x00" "ptr16")
Q(asm_thumb, (const byte*)"\x43\x6d\x09\x00" "asm_thumb")
Q(label, (const byte*)"\x43\xe7\x05\x00" "label")
Q(align, (const byte*)"\xa8\xfb\x05\x00" "align")
Q(data, (const byte*)"\x15\xdc\x04\x00" "data")
Q(builtins, (const byte*)"\xf7\x31\x08\x00" "builtins")
Q(Ellipsis, (const byte*)"\xf0\xe0\x08\x00" "Ellipsis")
Q(StopIteration, (const byte*)"\xea\x1c\x0d\x00" "StopIteration")
Q(BaseException, (const byte*)"\x07\x92\x0d\x00" "BaseException")
Q(ArithmeticError, (const byte*)"\x2d\x8c\x0f\x00" "ArithmeticError")
Q(AssertionError, (const byte*)"\x97\x5a\x0e\x00" "AssertionError")
Q(AttributeError, (const byte*)"\x21\xde\x0e\x00" "AttributeError")
Q(BufferError, (const byte*)"\x1d\x59\x0b\x00" "BufferError")
Q(EOFError, (const byte*)"\x91\xbf\x08\x00" "EOFError")
Q(Exception, (const byte*)"\xf2\x29\x09\x00" "Exception")
Q(FileExistsError, (const byte*)"\x5b\x14\x0f\x00" "FileExistsError")
Q(FileNotFoundError, (const byte*)"\x78\x89\x11\x00" "FileNotFoundError")
Q(FloatingPointError, (const byte*)"\x01\x34\x12\x00" "FloatingPointError")
Q(GeneratorExit, (const byte*)"\x16\x62\x0d\x00" "GeneratorExit")
Q(ImportError, (const byte*)"\x20\x9c\x0b\x00" "ImportError")
Q(IndentationError, (const byte*)"\x5c\x20\x10\x00" "IndentationError")
Q(IndexError, (const byte*)"\x83\xad\x0a\x00" "IndexError")
Q(KeyboardInterrupt, (const byte*)"\xaf\xe2\x11\x00" "KeyboardInterrupt")
Q(KeyError, (const byte*)"\xea\x00\x08\x00" "KeyError")
Q(LookupError, (const byte*)"\xff\x69\x0b\x00" "LookupError")
Q(MemoryError, (const byte*)"\xdc\x83\x0b\x00" "MemoryError")
Q(NameError, (const byte*)"\xba\x2d\x09\x00" "NameError")
Q(NotImplementedError, (const byte*)"\xc6\x98\x13\x00" "NotImplementedError")
Q(OSError, (const byte*)"\xa1\x65\x07\x00" "OSError")
Q(OverflowError, (const byte*)"\x81\xe1\x0d\x00" "OverflowError")
Q(RuntimeError, (const byte*)"\x61\xf1\x0c\x00" "RuntimeError")
Q(SyntaxError, (const byte*)"\x94\x8f\x0b\x00" "SyntaxError")
Q(SystemExit, (const byte*)"\x20\xff\x0a\x00" "SystemExit")
Q(TypeError, (const byte*)"\x25\x96\x09\x00" "TypeError")
Q(UnboundLocalError, (const byte*)"\x99\x22\x11\x00" "UnboundLocalError")
Q(ValueError, (const byte*)"\x96\x87\x0a\x00" "ValueError")
Q(ZeroDivisionError, (const byte*)"\xb6\x27\x11\x00" "ZeroDivisionError")
Q(None, (const byte*)"\x6f\xd1\x04\x00" "None")
Q(False, (const byte*)"\x38\x6f\x05\x00" "False")
Q(True, (const byte*)"\x13\x17\x04\x00" "True")
Q(object, (const byte*)"\x90\x8d\x06\x00" "object")
Q(NoneType, (const byte*)"\x17\x68\x08\x00" "NoneType")
Q(abs, (const byte*)"\x95\x32\x03\x00" "abs")
Q(all, (const byte*)"\x44\x33\x03\x00" "all")
Q(any, (const byte*)"\x13\x33\x03\x00" "any")
Q(args, (const byte*)"\xc2\xc6\x04\x00" "args")
Q(array, (const byte*)"\x7c\x72\x05\x00" "array")
Q(bin, (const byte*)"\xe0\x48\x03\x00" "bin")
Q(_brace_open__colon__hash_b_brace_close_, (const byte*)"\x58\x37\x05\x00" "{:#b}")
Q(bool, (const byte*)"\xeb\x3c\x04\x00" "bool")
Q(bytearray, (const byte*)"\x76\xa3\x09\x00" "bytearray")
Q(memoryview, (const byte*)"\x69\x44\x0a\x00" "memoryview")
Q(bytes, (const byte*)"\x5c\xb2\x05\x00" "bytes")
Q(callable, (const byte*)"\x0d\x70\x08\x00" "callable")
Q(calcsize, (const byte*)"\x4d\x38\x08\x00" "calcsize")
Q(chr, (const byte*)"\xdc\x4c\x03\x00" "chr")
Q(classmethod, (const byte*)"\xb4\x8c\x0b\x00" "classmethod")
Q(_collections, (const byte*)"\x3f\x35\x0c\x00" "_collections")
Q(complex, (const byte*)"\xc5\x9d\x07\x00" "complex")
Q(real, (const byte*)"\xbf\xf9\x04\x00" "real")
Q(imag, (const byte*)"\x47\xb7\x04\x00" "imag")
Q(dict, (const byte*)"\x3f\xfc\x04\x00" "dict")
Q(dir, (const byte*)"\xfa\x1e\x03\x00" "dir")
Q(divmod, (const byte*)"\xb8\x04\x06\x00" "divmod")
Q(enumerate, (const byte*)"\x71\xba\x09\x00" "enumerate")
Q(eval, (const byte*)"\x9b\xa6\x04\x00" "eval")
Q(exec, (const byte*)"\x1e\xc0\x04\x00" "exec")
Q(filter, (const byte*)"\x25\xbe\x06\x00" "filter")
Q(float, (const byte*)"\x35\x44\x05\x00" "float")
Q(from_bytes, (const byte*)"\x35\x74\x0a\x00" "from_bytes")
Q(getattr, (const byte*)"\xc0\x17\x07\x00" "getattr")
Q(globals, (const byte*)"\x9d\x49\x07\x00" "globals")
Q(hasattr, (const byte*)"\x8c\xb0\x07\x00" "hasattr")
Q(hash, (const byte*)"\xb7\x70\x04\x00" "hash")
Q(hex, (const byte*)"\x70\x50\x03\x00" "hex")
Q(_percent__hash_x, (const byte*)"\x7b\x1a\x03\x00" "%#x")
Q(id, (const byte*)"\x28\x6f\x02\x00" "id")
Q(int, (const byte*)"\x16\x53\x03\x00" "int")
Q(isinstance, (const byte*)"\xb6\xbe\x0a\x00" "isinstance")
Q(issubclass, (const byte*)"\xb5\x7f\x0a\x00" "issubclass")
Q(iter, (const byte*)"\x8f\x21\x04\x00" "iter")
Q(len, (const byte*)"\x62\x40\x03\x00" "len")
Q(list, (const byte*)"\x27\x1d\x04\x00" "list")
Q(locals, (const byte*)"\x3b\xa1\x06\x00" "locals")
Q(map, (const byte*)"\xb9\x43\x03\x00" "map")
Q(max, (const byte*)"\xb1\x43\x03\x00" "max")
Q(min, (const byte*)"\xaf\x42\x03\x00" "min")
Q(namedtuple, (const byte*)"\x1e\x16\x0a\x00" "namedtuple")
Q(next, (const byte*)"\x42\x88\x04\x00" "next")
Q(oct, (const byte*)"\xfd\x5c\x03\x00" "oct")
Q(_percent__hash_o, (const byte*)"\x6c\x1a\x03\x00" "%#o")
Q(open, (const byte*)"\xd1\x3a\x04\x00" "open")
Q(ord, (const byte*)"\x1c\x5e\x03\x00" "ord")
Q(path, (const byte*)"\x88\xce\x04\x00" "path")
Q(pow, (const byte*)"\x2d\x73\x03\x00" "pow")
Q(print, (const byte*)"\x54\xc6\x05\x00" "print")
Q(range, (const byte*)"\x1a\x5e\x05\x00" "range")
Q(read, (const byte*)"\xb7\xf9\x04\x00" "read")
Q(repr, (const byte*)"\xd0\xf7\x04\x00" "repr")
Q(reversed, (const byte*)"\xa1\x6e\x08\x00" "reversed")
Q(round, (const byte*)"\xe7\x25\x05\x00" "round")
Q(sorted, (const byte*)"\x5e\x15\x06\x00" "sorted")
Q(staticmethod, (const byte*)"\x62\xaf\x0c\x00" "staticmethod")
Q(sum, (const byte*)"\x2e\x8d\x03\x00" "sum")
Q(super, (const byte*)"\xc4\xb2\x05\x00" "super")
Q(str, (const byte*)"\x50\x8d\x03\x00" "str")
Q(sys, (const byte*)"\xbc\x8e\x03\x00" "sys")
Q(to_bytes, (const byte*)"\xd8\x3e\x08\x00" "to_bytes")
Q(tuple, (const byte*)"\xfd\x41\x05\x00" "tuple")
Q(type, (const byte*)"\x9d\x7f\x04\x00" "type")
Q(value, (const byte*)"\x4e\x34\x05\x00" "value")
Q(write, (const byte*)"\x98\xa8\x05\x00" "write")
Q(zip, (const byte*)"\xe6\xac\x03\x00" "zip")
Q(sep, (const byte*)"\x23\x8f\x03\x00" "sep")
Q(end, (const byte*)"\x0a\x23\x03\x00" "end")
Q(clear, (const byte*)"\x7c\xa0\x05\x00" "clear")
Q(copy, (const byte*)"\xe0\xdb\x04\x00" "copy")
Q(fromkeys, (const byte*)"\x37\xbd\x08\x00" "fromkeys")
Q(get, (const byte*)"\x33\x3b\x03\x00" "get")
Q(items, (const byte*)"\xe3\x53\x05\x00" "items")
Q(keys, (const byte*)"\x01\x13\x04\x00" "keys")
Q(pop, (const byte*)"\x2a\x73\x03\x00" "pop")
Q(popitem, (const byte*)"\xbf\x2c\x07\x00" "popitem")
Q(setdefault, (const byte*)"\x6c\xa3\x0a\x00" "setdefault")
Q(update, (const byte*)"\xb4\x76\x06\x00" "update")
Q(values, (const byte*)"\x7d\xbe\x06\x00" "values")
Q(append, (const byte*)"\x6b\x97\x06\x00" "append")
Q(close, (const byte*)"\x33\x67\x05\x00" "close")
Q(send, (const byte*)"\xb9\x76\x04\x00" "send")
Q(throw, (const byte*)"\xb3\x44\x05\x00" "throw")
Q(count, (const byte*)"\xa6\x4d\x05\x00" "count")
Q(extend, (const byte*)"\x63\xe8\x06\x00" "extend")
Q(index, (const byte*)"\x7b\x28\x05\x00" "index")
Q(remove, (const byte*)"\x63\x8a\x06\x00" "remove")
Q(insert, (const byte*)"\x12\x54\x06\x00" "insert")
Q(sort, (const byte*)"\xbf\x9d\x04\x00" "sort")
Q(join, (const byte*)"\xa7\x5c\x04\x00" "join")
Q(strip, (const byte*)"\x29\x1e\x05\x00" "strip")
Q(lstrip, (const byte*)"\xe5\xb9\x06\x00" "lstrip")
Q(rstrip, (const byte*)"\x3b\x95\x06\x00" "rstrip")
Q(format, (const byte*)"\x26\x33\x06\x00" "format")
Q(key, (const byte*)"\x32\x6d\x03\x00" "key")
Q(reverse, (const byte*)"\x25\x2a\x07\x00" "reverse")
Q(add, (const byte*)"\x44\x32\x03\x00" "add")
Q(find, (const byte*)"\x00\x34\x04\x00" "find")
Q(rfind, (const byte*)"\xd2\x9c\x05\x00" "rfind")
Q(rindex, (const byte*)"\xe9\x2b\x06\x00" "rindex")
Q(split, (const byte*)"\xb7\x33\x05\x00" "split")
Q(rsplit, (const byte*)"\xa5\x00\x06\x00" "rsplit")
Q(startswith, (const byte*)"\x74\xe8\x0a\x00" "startswith")
Q(endswith, (const byte*)"\x1b\xa3\x08\x00" "endswith")
Q(replace, (const byte*)"\x49\x25\x07\x00" "replace")
Q(partition, (const byte*)"\x87\xe5\x09\x00" "partition")
Q(rpartition, (const byte*)"\x15\xd0\x0a\x00" "rpartition")
Q(lower, (const byte*)"\xc6\xcb\x05\x00" "lower")
Q(upper, (const byte*)"\x27\x94\x05\x00" "upper")
Q(isspace, (const byte*)"\x5b\xf8\x07\x00" "isspace")
Q(isalpha, (const byte*)"\xeb\x37\x07\x00" "isalpha")
Q(isdigit, (const byte*)"\xa8\x9a\x07\x00" "isdigit")
Q(isupper, (const byte*)"\xdd\xa7\x07\x00" "isupper")
Q(islower, (const byte*)"\xfc\x80\x07\x00" "islower")
Q(iterable, (const byte*)"\x25\x92\x08\x00" "iterable")
Q(start, (const byte*)"\x85\xef\x05\x00" "start")
Q(bound_method, (const byte*)"\x97\xa2\x0c\x00" "bound_method")
Q(closure, (const byte*)"\x74\xca\x07\x00" "closure")
Q(dict_view, (const byte*)"\x2d\xa9\x09\x00" "dict_view")
Q(function, (const byte*)"\x27\x02\x08\x00" "function")
Q(generator, (const byte*)"\x96\xc3\x09\x00" "generator")
Q(iterator, (const byte*)"\x47\xbe\x08\x00" "iterator")
Q(module, (const byte*)"\xbf\x99\x06\x00" "module")
Q(slice, (const byte*)"\xb5\xf4\x05\x00" "slice")
Q(discard, (const byte*)"\x0f\x71\x07\x00" "discard")
Q(difference, (const byte*)"\x72\x24\x0a\x00" "difference")
Q(difference_update, (const byte*)"\x9c\xfa\x11\x00" "difference_update")
Q(intersection, (const byte*)"\x28\x2a\x0c\x00" "intersection")
Q(intersection_update, (const byte*)"\x06\xdd\x13\x00" "intersection_update")
Q(isdisjoint, (const byte*)"\xf7\x68\x0a\x00" "isdisjoint")
Q(issubset, (const byte*)"\xb9\xc1\x08\x00" "issubset")
Q(issuperset, (const byte*)"\xfc\xec\x0a\x00" "issuperset")
Q(set, (const byte*)"\x27\x8f\x03\x00" "set")
Q(symmetric_difference, (const byte*)"\xce\x67\x14\x00" "symmetric_difference")
Q(symmetric_difference_update, (const byte*)"\x60\xf8\x1b\x00" "symmetric_difference_update")
Q(union, (const byte*)"\xf6\x7c\x05\x00" "union")
Q(frozenset, (const byte*)"\xed\x9c\x09\x00" "frozenset")
Q(math, (const byte*)"\x35\xbb\x04\x00" "math")
Q(e, (const byte*)"\xc0\xb5\x01\x00" "e")
Q(pi, (const byte*)"\x1c\x70\x02\x00" "pi")
Q(sqrt, (const byte*)"\x21\x44\x04\x00" "sqrt")
Q(exp, (const byte*)"\xc8\x24\x03\x00" "exp")
Q(expm1, (const byte*)"\x74\x72\x05\x00" "expm1")
Q(log, (const byte*)"\x21\x3f\x03\x00" "log")
Q(log2, (const byte*)"\x73\x23\x04\x00" "log2")
Q(log10, (const byte*)"\x40\x91\x05\x00" "log10")
Q(cosh, (const byte*)"\xd2\xdb\x04\x00" "cosh")
Q(sinh, (const byte*)"\xb9\xa6\x04\x00" "sinh")
Q(tanh, (const byte*)"\xd6\xa1\x04\x00" "tanh")
Q(acosh, (const byte*)"\x13\xa3\x05\x00" "acosh")
Q(asinh, (const byte*)"\x38\x8f\x05\x00" "asinh")
Q(atanh, (const byte*)"\x97\x81\x05\x00" "atanh")
Q(cos, (const byte*)"\x7a\x4c\x03\x00" "cos")
Q(sin, (const byte*)"\xb1\x90\x03\x00" "sin")
Q(tan, (const byte*)"\xfe\x61\x03\x00" "tan")
Q(acos, (const byte*)"\x1b\xa0\x04\x00" "acos")
Q(asin, (const byte*)"\x50\xe5\x04\x00" "asin")
Q(atan, (const byte*)"\x1f\xbe\x04\x00" "atan")
Q(atan2, (const byte*)"\xcd\x81\x05\x00" "atan2")
Q(ceil, (const byte*)"\x06\xb0\x04\x00" "ceil")
Q(copysign, (const byte*)"\x33\x14\x08\x00" "copysign")
Q(fabs, (const byte*)"\x93\x12\x04\x00" "fabs")
Q(fmod, (const byte*)"\xe5\x44\x04\x00" "fmod")
Q(floor, (const byte*)"\x7d\x46\x05\x00" "floor")
Q(isfinite, (const byte*)"\xa6\xab\x08\x00" "isfinite")
Q(isinf, (const byte*)"\x3e\x11\x05\x00" "isinf")
Q(isnan, (const byte*)"\x9e\x03\x05\x00" "isnan")
Q(trunc, (const byte*)"\x5b\x99\x05\x00" "trunc")
Q(modf, (const byte*)"\x25\xc0\x04\x00" "modf")
Q(frexp, (const byte*)"\x1c\x98\x05\x00" "frexp")
Q(ldexp, (const byte*)"\x40\x6f\x05\x00" "ldexp")
Q(degrees, (const byte*)"\x02\x41\x07\x00" "degrees")
Q(radians, (const byte*)"\x87\x3f\x07\x00" "radians")
Q(erf, (const byte*)"\x94\x23\x03\x00" "erf")
Q(erfc, (const byte*)"\x77\x96\x04\x00" "erfc")
Q(gamma, (const byte*)"\x02\x90\x05\x00" "gamma")
Q(lgamma, (const byte*)"\xce\x6c\x06\x00" "lgamma")
Q(cmath, (const byte*)"\xb6\xf4\x05\x00" "cmath")
Q(phase, (const byte*)"\x6a\xd5\x05\x00" "phase")
Q(polar, (const byte*)"\x05\x0c\x05\x00" "polar")
Q(rect, (const byte*)"\xe5\xf9\x04\x00" "rect")
Q(alloc_emergency_exception_buf, (const byte*)"\x78\x2a\x1d\x00" "alloc_emergency_exception_buf")
Q(_lt_module_gt_, (const byte*)"\xbd\x94\x08\x00" "<module>")
Q(_lt_lambda_gt_, (const byte*)"\x80\x8c\x08\x00" "<lambda>")
Q(_lt_listcomp_gt_, (const byte*)"\xd4\x15\x0a\x00" "<listcomp>")
Q(_lt_dictcomp_gt_, (const byte*)"\xcc\x8d\x0a\x00" "<dictcomp>")
Q(_lt_setcomp_gt_, (const byte*)"\x54\x51\x09\x00" "<setcomp>")
Q(_lt_genexpr_gt_, (const byte*)"\x34\x6a\x09\x00" "<genexpr>")
Q(_lt_string_gt_, (const byte*)"\x52\x53\x08\x00" "<string>")
Q(_lt_stdin_gt_, (const byte*)"\xe3\x63\x07\x00" "<stdin>")
Q(encode, (const byte*)"\x43\xca\x06\x00" "encode")
Q(decode, (const byte*)"\xa9\x59\x06\x00" "decode")
Q(utf_hyphen_8, (const byte*)"\xb7\x82\x05\x00" "utf-8")
Q(argv, (const byte*)"\xc7\xc6\x04\x00" "argv")
Q(byteorder, (const byte*)"\x61\x99\x09\x00" "byteorder")
Q(big, (const byte*)"\xe9\x48\x03\x00" "big")
Q(exit, (const byte*)"\x85\xbe\x04\x00" "exit")
Q(little, (const byte*)"\x89\x6a\x06\x00" "little")
Q(platform, (const byte*)"\x3a\x19\x08\x00" "platform")
Q(stdin, (const byte*)"\x21\x04\x05\x00" "stdin")
Q(stdout, (const byte*)"\x08\x83\x06\x00" "stdout")
Q(stderr, (const byte*)"\xa3\x58\x06\x00" "stderr")
Q(version, (const byte*)"\xbf\xd3\x07\x00" "version")
Q(version_info, (const byte*)"\x6e\x0a\x0c\x00" "version_info")
Q(struct, (const byte*)"\x12\x90\x06\x00" "struct")
Q(pack, (const byte*)"\xbc\xd1\x04\x00" "pack")
Q(unpack, (const byte*)"\x07\x3c\x06\x00" "unpack")
Q(uctypes, (const byte*)"\xf8\x71\x07\x00" "uctypes")
Q(sizeof, (const byte*)"\x49\x73\x06\x00" "sizeof")
Q(addressof, (const byte*)"\x5a\xf9\x09\x00" "addressof")
Q(bytes_at, (const byte*)"\xb6\x5d\x08\x00" "bytes_at")
Q(bytearray_at, (const byte*)"\x9c\x5c\x0c\x00" "bytearray_at")
Q(NATIVE, (const byte*)"\x04\x8e\x06\x00" "NATIVE")
Q(LITTLE_ENDIAN, (const byte*)"\xbf\x5b\x0d\x00" "LITTLE_ENDIAN")
Q(BIG_ENDIAN, (const byte*)"\xff\x51\x0a\x00" "BIG_ENDIAN")
Q(VOID, (const byte*)"\x31\xf2\x04\x00" "VOID")
Q(UINT8, (const byte*)"\xbb\xe1\x05\x00" "UINT8")
Q(INT8, (const byte*)"\xce\xbd\x04\x00" "INT8")
Q(UINT16, (const byte*)"\xc4\x17\x06\x00" "UINT16")
Q(INT16, (const byte*)"\x91\x76\x05\x00" "INT16")
Q(UINT32, (const byte*)"\x82\x17\x06\x00" "UINT32")
Q(INT32, (const byte*)"\x57\x76\x05\x00" "INT32")
Q(UINT64, (const byte*)"\x61\x18\x06\x00" "UINT64")
Q(INT64, (const byte*)"\xf4\x75\x05\x00" "INT64")
Q(BFUINT8, (const byte*)"\xbf\xaf\x07\x00" "BFUINT8")
Q(BFINT8, (const byte*)"\x4a\x9a\x06\x00" "BFINT8")
Q(BFUINT16, (const byte*)"\x40\xa6\x08\x00" "BFUINT16")
Q(BFINT16, (const byte*)"\x95\xe2\x07\x00" "BFINT16")
Q(BFUINT32, (const byte*)"\x06\xa6\x08\x00" "BFUINT32")
Q(BFINT32, (const byte*)"\x53\xe2\x07\x00" "BFINT32")
Q(FLOAT32, (const byte*)"\xb4\x87\x07\x00" "FLOAT32")
Q(FLOAT64, (const byte*)"\x17\x87\x07\x00" "FLOAT64")
Q(ARRAY, (const byte*)"\x5c\x7a\x05\x00" "ARRAY")
Q(PTR, (const byte*)"\xb3\x0c\x03\x00" "PTR")
Q(BF_POS, (const byte*)"\x52\x9d\x06\x00" "BF_POS")
Q(BF_LEN, (const byte*)"\x19\xb0\x06\x00" "BF_LEN")
Q(_io, (const byte*)"\xdc\x1f\x03\x00" "_io")
Q(readall, (const byte*)"\x76\x4b\x07\x00" "readall")
Q(readinto, (const byte*)"\x4b\xbf\x08\x00" "readinto")
Q(readline, (const byte*)"\xf9\x19\x08\x00" "readline")
Q(readlines, (const byte*)"\x6a\x59\x09\x00" "readlines")
Q(FileIO, (const byte*)"\xc5\x15\x06\x00" "FileIO")
Q(TextIOWrapper, (const byte*)"\xad\x8d\x0d\x00" "TextIOWrapper")
Q(StringIO, (const byte*)"\x76\x76\x08\x00" "StringIO")
Q(BytesIO, (const byte*)"\x1a\xb7\x07\x00" "BytesIO")
Q(getvalue, (const byte*)"\x78\xac\x08\x00" "getvalue")
Q(file, (const byte*)"\xc3\x34\x04\x00" "file")
Q(mode, (const byte*)"\x26\xc0\x04\x00" "mode")
Q(r, (const byte*)"\xd7\xb5\x01\x00" "r")
Q(encoding, (const byte*)"\x06\x9c\x08\x00" "encoding")
Q(gc, (const byte*)"\x61\x6e\x02\x00" "gc")
Q(collect, (const byte*)"\x9b\x65\x07\x00" "collect")
Q(disable, (const byte*)"\x91\x76\x07\x00" "disable")
Q(enable, (const byte*)"\x04\xde\x06\x00" "enable")
Q(isenabled, (const byte*)"\x9a\xe5\x09\x00" "isenabled")
Q(mem_free, (const byte*)"\xcb\x62\x08\x00" "mem_free")
Q(mem_alloc, (const byte*)"\x52\x2b\x09\x00" "mem_alloc")
Q(property, (const byte*)"\xc2\x29\x08\x00" "property")
Q(getter, (const byte*)"\x90\xb2\x06\x00" "getter")
Q(setter, (const byte*)"\x04\x59\x06\x00" "setter")
Q(deleter, (const byte*)"\x6e\xdb\x07\x00" "deleter")
Q(uzlib, (const byte*)"\x6d\x9b\x05\x00" "uzlib")
Q(decompress, (const byte*)"\x62\xfb\x0a\x00" "decompress")
Q(ujson, (const byte*)"\xe8\x30\x05\x00" "ujson")
Q(dumps, (const byte*)"\x7a\x2d\x05\x00" "dumps")
Q(loads, (const byte*)"\xb0\xb0\x05\x00" "loads")
Q(ure, (const byte*)"\x87\x63\x03\x00" "ure")
Q(compile, (const byte*)"\xf4\xc9\x07\x00" "compile")
Q(match, (const byte*)"\x96\x22\x05\x00" "match")
Q(search, (const byte*)"\xab\xc1\x06\x00" "search")
Q(group, (const byte*)"\xba\xb0\x05\x00" "group")
Q(DEBUG, (const byte*)"\x34\x6d\x05\x00" "DEBUG")
Q(uheapq, (const byte*)"\x1d\x43\x06\x00" "uheapq")
Q(heappush, (const byte*)"\x87\x6b\x08\x00" "heappush")
Q(heappop, (const byte*)"\xd6\x27\x07\x00" "heappop")
Q(heapify, (const byte*)"\xaf\x2d\x07\x00" "heapify")
Q(help, (const byte*)"\x94\x5c\x04\x00" "help")
Q(pyb, (const byte*)"\xee\x71\x03\x00" "pyb")
Q(unique_id, (const byte*)"\x04\x89\x09\x00" "unique_id")
Q(bootloader, (const byte*)"\xe2\xef\x0a\x00" "bootloader")
Q(hard_reset, (const byte*)"\xd0\x51\x0a\x00" "hard_reset")
Q(info, (const byte*)"\xeb\xb3\x04\x00" "info")
Q(sd_test, (const byte*)"\x9b\x4d\x07\x00" "sd_test")
Q(present, (const byte*)"\xee\x18\x07\x00" "present")
Q(power, (const byte*)"\xda\xed\x05\x00" "power")
Q(wfi, (const byte*)"\x9d\x7e\x03\x00" "wfi")
Q(disable_irq, (const byte*)"\x04\x3a\x0b\x00" "disable_irq")
Q(enable_irq, (const byte*)"\x91\x60\x0a\x00" "enable_irq")
Q(stop, (const byte*)"\x9d\x36\x04\x00" "stop")
Q(standby, (const byte*)"\xd2\xd9\x07\x00" "standby")
Q(main, (const byte*)"\xce\xb7\x04\x00" "main")
Q(usb_mode, (const byte*)"\xbd\x6d\x08\x00" "usb_mode")
Q(sync, (const byte*)"\xa2\x62\x04\x00" "sync")
Q(repl_info, (const byte*)"\xbf\x37\x09\x00" "repl_info")
Q(delay, (const byte*)"\x50\x4c\x05\x00" "delay")
Q(udelay, (const byte*)"\x25\xaf\x06\x00" "udelay")
Q(servo, (const byte*)"\x78\xda\x05\x00" "servo")
Q(pwm, (const byte*)"\x2f\x70\x03\x00" "pwm")
Q(have_cdc, (const byte*)"\x84\x08\x08\x00" "have_cdc")
Q(repl_uart, (const byte*)"\x23\x58\x09\x00" "repl_uart")
Q(hid, (const byte*)"\xe0\x4f\x03\x00" "hid")
Q(time, (const byte*)"\xf0\xc1\x04\x00" "time")
Q(rng, (const byte*)"\x9e\x8b\x03\x00" "rng")
Q(SD, (const byte*)"\xf2\x74\x02\x00" "SD")
Q(SDcard, (const byte*)"\xc6\x0b\x06\x00" "SDcard")
Q(flush, (const byte*)"\x61\xc1\x05\x00" "flush")
Q(_slash_flash, (const byte*)"\x1a\x4e\x06\x00" "/flash")
Q(_slash_flash_slash_lib, (const byte*)"\x92\x4d\x0a\x00" "/flash/lib")
Q(_slash_sd, (const byte*)"\xbd\x3d\x03\x00" "/sd")
Q(_slash_sd_slash_lib, (const byte*)"\xb5\x1e\x07\x00" "/sd/lib")
Q(millis, (const byte*)"\x5b\x21\x06\x00" "millis")
Q(micros, (const byte*)"\xac\x88\x06\x00" "micros")
Q(elapsed_millis, (const byte*)"\x8e\xc2\x0e\x00" "elapsed_millis")
Q(elapsed_micros, (const byte*)"\x39\xfa\x0e\x00" "elapsed_micros")
Q(re, (const byte*)"\xd2\x70\x02\x00" "re")
Q(zlib, (const byte*)"\xf8\x37\x04\x00" "zlib")
Q(json, (const byte*)"\xfd\xd1\x04\x00" "json")
Q(seek, (const byte*)"\x9d\x75\x04\x00" "seek")
Q(tell, (const byte*)"\x14\xb1\x04\x00" "tell")
Q(USB_VCP, (const byte*)"\x1b\x8a\x07\x00" "USB_VCP")
Q(recv, (const byte*)"\xe7\xf9\x04\x00" "recv")
Q(timeout, (const byte*)"\x3e\x54\x07\x00" "timeout")
Q(RTC, (const byte*)"\xa0\x04\x03\x00" "RTC")
Q(datetime, (const byte*)"\xe4\x04\x08\x00" "datetime")
Q(Pin, (const byte*)"\x12\x14\x03\x00" "Pin")
Q(PinAF, (const byte*)"\x35\x58\x05\x00" "PinAF")
Q(PinNamed, (const byte*)"\x51\xca\x08\x00" "PinNamed")
Q(init, (const byte*)"\x1f\xb4\x04\x00" "init")
Q(low, (const byte*)"\x31\x3f\x03\x00" "low")
Q(high, (const byte*)"\x2b\x4c\x04\x00" "high")
Q(name, (const byte*)"\xa2\x75\x04\x00" "name")
Q(names, (const byte*)"\x91\x29\x05\x00" "names")
Q(af, (const byte*)"\x22\x6e\x02\x00" "af")
Q(af_list, (const byte*)"\x5f\x80\x07\x00" "af_list")
Q(port, (const byte*)"\x5c\xd8\x04\x00" "port")
Q(pin, (const byte*)"\xf2\x73\x03\x00" "pin")
Q(gpio, (const byte*)"\x54\xd8\x04\x00" "gpio")
Q(mapper, (const byte*)"\x5e\x05\x06\x00" "mapper")
Q(debug, (const byte*)"\xd4\x55\x05\x00" "debug")
Q(board, (const byte*)"\x7f\xd4\x05\x00" "board")
Q(cpu, (const byte*)"\xc3\x4d\x03\x00" "cpu")
Q(pull, (const byte*)"\x80\x7d\x04\x00" "pull")
Q(reg, (const byte*)"\x75\x8b\x03\x00" "reg")
Q(IN, (const byte*)"\x22\x73\x02\x00" "IN")
Q(OUT_PP, (const byte*)"\x34\x27\x06\x00" "OUT_PP")
Q(OUT_OD, (const byte*)"\x1f\x2a\x06\x00" "OUT_OD")
Q(AF_PP, (const byte*)"\x7d\x2f\x05\x00" "AF_PP")
Q(AF_OD, (const byte*)"\x96\x2f\x05\x00" "AF_OD")
Q(ANALOG, (const byte*)"\xaf\xf2\x06\x00" "ANALOG")
Q(PULL_NONE, (const byte*)"\x55\xb5\x09\x00" "PULL_NONE")
Q(PULL_UP, (const byte*)"\xba\x5e\x07\x00" "PULL_UP")
Q(PULL_DOWN, (const byte*)"\xad\xfb\x09\x00" "PULL_DOWN")
Q(LED, (const byte*)"\x88\xdc\x03\x00" "LED")
Q(on, (const byte*)"\x64\x6f\x02\x00" "on")
Q(off, (const byte*)"\x8a\x5c\x03\x00" "off")
Q(toggle, (const byte*)"\xb7\x43\x06\x00" "toggle")
Q(intensity, (const byte*)"\xca\x3d\x09\x00" "intensity")
Q(Switch, (const byte*)"\x97\x00\x06\x00" "Switch")
Q(callback, (const byte*)"\x4c\xf0\x08\x00" "callback")
Q(UART, (const byte*)"\xb7\x19\x04\x00" "UART")
Q(baudrate, (const byte*)"\xf5\xd8\x08\x00" "baudrate")
Q(bits, (const byte*)"\x49\x68\x04\x00" "bits")
Q(parity, (const byte*)"\x42\x05\x06\x00" "parity")
Q(flow, (const byte*)"\x37\x40\x04\x00" "flow")
Q(read_buf_len, (const byte*)"\xa1\x09\x0c\x00" "read_buf_len")
Q(buf, (const byte*)"\x74\x49\x03\x00" "buf")
Q(timeout_char, (const byte*)"\x79\x4a\x0c\x00" "timeout_char")
Q(deinit, (const byte*)"\x9e\x8d\x06\x00" "deinit")
Q(writechar, (const byte*)"\x40\xe0\x09\x00" "writechar")
Q(readchar, (const byte*)"\xef\x92\x08\x00" "readchar")
Q(RTS, (const byte*)"\xb0\x04\x03\x00" "RTS")
Q(CTS, (const byte*)"\x61\xd1\x03\x00" "CTS")
Q(CAN, (const byte*)"\x89\xcf\x03\x00" "CAN")
Q(prescaler, (const byte*)"\x28\x15\x09\x00" "prescaler")
Q(addr, (const byte*)"\xb6\x7a\x04\x00" "addr")
Q(fifo, (const byte*)"\x03\x35\x04\x00" "fifo")
Q(extframe, (const byte*)"\x11\x74\x08\x00" "extframe")
Q(NORMAL, (const byte*)"\xf6\x79\x06\x00" "NORMAL")
Q(LOOPBACK, (const byte*)"\x12\x3d\x08\x00" "LOOPBACK")
Q(SILENT, (const byte*)"\x6c\x24\x06\x00" "SILENT")
Q(SILENT_LOOPBACK, (const byte*)"\x24\x5d\x0f\x00" "SILENT_LOOPBACK")
Q(Timer, (const byte*)"\xa2\x1f\x05\x00" "Timer")
Q(channel, (const byte*)"\x26\x91\x07\x00" "channel")
Q(counter, (const byte*)"\x11\x42\x07\x00" "counter")
Q(source_freq, (const byte*)"\x47\x26\x0b\x00" "source_freq")
Q(period, (const byte*)"\xa0\xa0\x06\x00" "period")
Q(freq, (const byte*)"\xe5\x3a\x04\x00" "freq")
Q(div, (const byte*)"\xfe\x1e\x03\x00" "div")
Q(UP, (const byte*)"\xa0\x73\x02\x00" "UP")
Q(DOWN, (const byte*)"\x37\x47\x04\x00" "DOWN")
Q(CENTER, (const byte*)"\x8e\xdb\x06\x00" "CENTER")
Q(IC, (const byte*)"\x2f\x73\x02\x00" "IC")
Q(PWM, (const byte*)"\x4f\x0d\x03\x00" "PWM")
Q(PWM_INVERTED, (const byte*)"\xe3\xff\x0c\x00" "PWM_INVERTED")
Q(OC_TIMING, (const byte*)"\xe6\x28\x09\x00" "OC_TIMING")
Q(OC_ACTIVE, (const byte*)"\xfa\x02\x09\x00" "OC_ACTIVE")
Q(OC_INACTIVE, (const byte*)"\x1d\x9c\x0b\x00" "OC_INACTIVE")
Q(OC_TOGGLE, (const byte*)"\x64\x08\x09\x00" "OC_TOGGLE")
Q(OC_FORCED_ACTIVE, (const byte*)"\xfc\x6f\x10\x00" "OC_FORCED_ACTIVE")
Q(OC_FORCED_INACTIVE, (const byte*)"\x1b\x51\x12\x00" "OC_FORCED_INACTIVE")
Q(HIGH, (const byte*)"\x2b\x6c\x04\x00" "HIGH")
Q(LOW, (const byte*)"\x51\xdc\x03\x00" "LOW")
Q(RISING, (const byte*)"\x2d\x0b\x06\x00" "RISING")
Q(FALLING, (const byte*)"\x02\x69\x07\x00" "FALLING")
Q(BOTH, (const byte*)"\x14\x3f\x04\x00" "BOTH")
Q(TimerChannel, (const byte*)"\x41\x99\x0c\x00" "TimerChannel")
Q(pulse_width, (const byte*)"\x23\x14\x0b\x00" "pulse_width")
Q(pulse_width_percent, (const byte*)"\x27\xb7\x13\x00" "pulse_width_percent")
Q(compare, (const byte*)"\x22\xa7\x07\x00" "compare")
Q(capture, (const byte*)"\x61\xb6\x07\x00" "capture")
Q(polarity, (const byte*)"\x41\xed\x08\x00" "polarity")
Q(deadtime, (const byte*)"\x54\xf8\x08\x00" "deadtime")
Q(ExtInt, (const byte*)"\x7f\x5c\x06\x00" "ExtInt")
Q(line, (const byte*)"\xcb\x1c\x04\x00" "line")
Q(swint, (const byte*)"\xb2\x7a\x05\x00" "swint")
Q(regs, (const byte*)"\x66\xfa\x04\x00" "regs")
Q(IRQ_RISING, (const byte*)"\x78\xed\x0a\x00" "IRQ_RISING")
Q(IRQ_FALLING, (const byte*)"\x37\xc0\x0b\x00" "IRQ_FALLING")
Q(IRQ_RISING_FALLING, (const byte*)"\x60\xd5\x12\x00" "IRQ_RISING_FALLING")
Q(EVT_RISING, (const byte*)"\x55\xfe\x0a\x00" "EVT_RISING")
Q(EVT_FALLING, (const byte*)"\x3a\x5d\x0b\x00" "EVT_FALLING")
Q(EVT_RISING_FALLING, (const byte*)"\xcd\x08\x12\x00" "EVT_RISING_FALLING")
Q(I2C, (const byte*)"\x5d\xdf\x03\x00" "I2C")
Q(gencall, (const byte*)"\x8b\x06\x07\x00" "gencall")
Q(memaddr, (const byte*)"\x93\xe8\x07\x00" "memaddr")
Q(addr_size, (const byte*)"\x4c\x40\x09\x00" "addr_size")
Q(is_ready, (const byte*)"\x0b\x00\x08\x00" "is_ready")
Q(scan, (const byte*)"\x1a\x8e\x04\x00" "scan")
Q(mem_read, (const byte*)"\x8d\xeb\x08\x00" "mem_read")
Q(mem_write, (const byte*)"\x62\x8c\x09\x00" "mem_write")
Q(SPI, (const byte*)"\xef\x11\x03\x00" "SPI")
Q(send_recv, (const byte*)"\xa4\x30\x09\x00" "send_recv")
Q(nss, (const byte*)"\x2b\x5a\x03\x00" "nss")
Q(firstbit, (const byte*)"\x20\x39\x08\x00" "firstbit")
Q(ti, (const byte*)"\x98\x6f\x02\x00" "ti")
Q(crc, (const byte*)"\x17\x4d\x03\x00" "crc")
Q(MASTER, (const byte*)"\x39\x8d\x06\x00" "MASTER")
Q(SLAVE, (const byte*)"\x68\x15\x05\x00" "SLAVE")
Q(MSB, (const byte*)"\x59\xca\x03\x00" "MSB")
Q(LSB, (const byte*)"\xd8\xde\x03\x00" "LSB")
Q(Accel, (const byte*)"\xed\x6f\x05\x00" "Accel")
Q(x, (const byte*)"\xdd\xb5\x01\x00" "x")
Q(y, (const byte*)"\xdc\xb5\x01\x00" "y")
Q(z, (const byte*)"\xdf\xb5\x01\x00" "z")
Q(tilt, (const byte*)"\x00\xc1\x04\x00" "tilt")
Q(filtered_xyz, (const byte*)"\x20\x15\x0c\x00" "filtered_xyz")
Q(ADC, (const byte*)"\x63\xb6\x03\x00" "ADC")
Q(ADCAll, (const byte*)"\x02\x28\x06\x00" "ADCAll")
Q(read_timed, (const byte*)"\xf9\xfe\x0a\x00" "read_timed")
Q(read_channel, (const byte*)"\xcb\xb6\x0c\x00" "read_channel")
Q(read_core_temp, (const byte*)"\xe0\xc2\x0e\x00" "read_core_temp")
Q(read_core_vbat, (const byte*)"\xed\xb7\x0e\x00" "read_core_vbat")
Q(read_core_vref, (const byte*)"\x6b\x74\x0e\x00" "read_core_vref")
Q(DAC, (const byte*)"\x03\xba\x03\x00" "DAC")
Q(noise, (const byte*)"\x9b\xf4\x05\x00" "noise")
Q(triangle, (const byte*)"\xeb\x99\x08\x00" "triangle")
Q(write_timed, (const byte*)"\x96\x4f\x0b\x00" "write_timed")
Q(CIRCULAR, (const byte*)"\xb4\x76\x08\x00" "CIRCULAR")
Q(Servo, (const byte*)"\x98\xd9\x05\x00" "Servo")
Q(calibration, (const byte*)"\xaf\x33\x0b\x00" "calibration")
Q(angle, (const byte*)"\x84\x2c\x05\x00" "angle")
Q(speed, (const byte*)"\x62\x0f\x05\x00" "speed")
Q(uos, (const byte*)"\xec\x67\x03\x00" "uos")
Q(os, (const byte*)"\x79\x6f\x02\x00" "os")
Q(_slash_, (const byte*)"\x8a\xb5\x01\x00" "/")
Q(flash, (const byte*)"\x75\x92\x05\x00" "flash")
Q(sd, (const byte*)"\xf2\x70\x02\x00" "sd")
Q(chdir, (const byte*)"\xb1\xb2\x05\x00" "chdir")
Q(getcwd, (const byte*)"\x03\xd0\x06\x00" "getcwd")
Q(listdir, (const byte*)"\x98\xe3\x07\x00" "listdir")
Q(mkdir, (const byte*)"\x9c\xb5\x05\x00" "mkdir")
Q(rmdir, (const byte*)"\x45\xa7\x05\x00" "rmdir")
Q(unlink, (const byte*)"\xfe\x8f\x06\x00" "unlink")
Q(stat, (const byte*)"\xd7\x35\x04\x00" "stat")
Q(urandom, (const byte*)"\xab\xae\x07\x00" "urandom")
Q(utime, (const byte*)"\xe5\x9d\x05\x00" "utime")
Q(localtime, (const byte*)"\x7d\x46\x09\x00" "localtime")
Q(mktime, (const byte*)"\x96\x2b\x06\x00" "mktime")
Q(sleep, (const byte*)"\xea\x27\x05\x00" "sleep")
Q(uselect, (const byte*)"\x58\x8e\x07\x00" "uselect")
Q(select, (const byte*)"\x8d\x41\x06\x00" "select")
Q(poll, (const byte*)"\x9a\xd9\x04\x00" "poll")
Q(register, (const byte*)"\xac\xa1\x08\x00" "register")
Q(unregister, (const byte*)"\x17\xd4\x0a\x00" "unregister")
Q(modify, (const byte*)"\xf5\x66\x06\x00" "modify")
Q(input, (const byte*)"\x73\x5a\x05\x00" "input")
Q(LCD, (const byte*)"\xce\xdc\x03\x00" "LCD")
Q(command, (const byte*)"\x02\x77\x07\x00" "command")
Q(contrast, (const byte*)"\x07\x8a\x08\x00" "contrast")
Q(light, (const byte*)"\xfb\x91\x05\x00" "light")
Q(fill, (const byte*)"\xca\x34\x04\x00" "fill")
Q(pixel, (const byte*)"\x4d\xf0\x05\x00" "pixel")
Q(text, (const byte*)"\x98\xaf\x04\x00" "text")
Q(show, (const byte*)"\x86\xaa\x04\x00" "show")
Q(usocket, (const byte*)"\x75\x00\x07\x00" "usocket")
Q(socket, (const byte*)"\x60\xcc\x06\x00" "socket")
Q(getaddrinfo, (const byte*)"\x6e\x18\x0b\x00" "getaddrinfo")
Q(AF_INET, (const byte*)"\xeb\xb7\x07\x00" "AF_INET")
Q(AF_INET6, (const byte*)"\x7d\xb5\x08\x00" "AF_INET6")
Q(SOCK_STREAM, (const byte*)"\x32\xbe\x0b\x00" "SOCK_STREAM")
Q(SOCK_DGRAM, (const byte*)"\xb3\x14\x0a\x00" "SOCK_DGRAM")
Q(SOCK_RAW, (const byte*)"\xca\x96\x08\x00" "SOCK_RAW")
Q(network, (const byte*)"\x5b\x28\x07\x00" "network")
Q(route, (const byte*)"\x3c\x28\x05\x00" "route")
Q(wiznet5k, (const byte*)"\xe0\x78\x08\x00" "wiznet5k")
Q(WIZnet5k, (const byte*)"\x00\x78\x08\x00" "WIZnet5k")
Q(ipaddr, (const byte*)"\x8f\x20\x06\x00" "ipaddr")
Q(family, (const byte*)"\x33\xca\x06\x00" "family")
Q(fileno, (const byte*)"\x82\x76\x06\x00" "fileno")
Q(bind, (const byte*)"\x84\x64\x04\x00" "bind")
Q(listen, (const byte*)"\xcc\x0e\x06\x00" "listen")
Q(accept, (const byte*)"\x85\x89\x06\x00" "accept")
Q(connect, (const byte*)"\xdb\x3d\x07\x00" "connect")
Q(disconnect, (const byte*)"\xa5\x85\x0a\x00" "disconnect")
Q(sendto, (const byte*)"\x22\x03\x06\x00" "sendto")
Q(recvfrom, (const byte*)"\x91\x90\x08\x00" "recvfrom")
Q(gethostbyname, (const byte*)"\xef\xe5\x0d\x00" "gethostbyname")
Q(cc3k, (const byte*)"\x1d\xc2\x04\x00" "cc3k")
Q(CC3k, (const byte*)"\x1d\xc6\x04\x00" "CC3k")
Q(is_connected, (const byte*)"\x1f\xcb\x0c\x00" "is_connected")
Q(ifconfig, (const byte*)"\xe0\x41\x08\x00" "ifconfig")
Q(patch_version, (const byte*)"\x6e\x98\x0d\x00" "patch_version")
Q(patch_program, (const byte*)"\x40\x73\x0d\x00" "patch_program")
Q(WEP, (const byte*)"\x07\x03\x03\x00" "WEP")
Q(WPA, (const byte*)"\xe3\x00\x03\x00" "WPA")
Q(WPA2, (const byte*)"\x71\x1d\x04\x00" "WPA2")
Q(ssid, (const byte*)"\x08\x4b\x04\x00" "ssid")
Q(security, (const byte*)"\x93\x48\x08\x00" "security")
Q(bssid, (const byte*)"\x4a\x3c\x05\x00" "bssid")
Q(settimeout, (const byte*)"\xdc\x8a\x0a\x00" "settimeout")
Q(setblocking, (const byte*)"\x6e\x18\x0b\x00" "setblocking")
Q(stm, (const byte*)"\x4f\x8d\x03\x00" "stm")
Q(mem, (const byte*)"\x20\x44\x03\x00" "mem")
Q(mem8, (const byte*)"\x18\xc8\x04\x00" "mem8")
Q(mem16, (const byte*)"\x07\xca\x05\x00" "mem16")
Q(mem32, (const byte*)"\x41\xca\x05\x00" "mem32")
Q(ADC1, (const byte*)"\xf2\x82\x04\x00" "ADC1")
Q(ADC2, (const byte*)"\xf1\x82\x04\x00" "ADC2")
Q(ADC3, (const byte*)"\xf0\x82\x04\x00" "ADC3")
Q(ADC_CR1, (const byte*)"\x3c\xf0\x07\x00" "ADC_CR1")
Q(ADC_CR2, (const byte*)"\x3f\xf0\x07\x00" "ADC_CR2")
Q(ADC_DR, (const byte*)"\x0a\xa1\x06\x00" "ADC_DR")
Q(ADC_HTR, (const byte*)"\xd2\xb0\x07\x00" "ADC_HTR")
Q(ADC_JDR1, (const byte*)"\xf1\x43\x08\x00" "ADC_JDR1")
Q(ADC_JDR2, (const byte*)"\xf2\x43\x08\x00" "ADC_JDR2")
Q(ADC_JDR3, (const byte*)"\xf3\x43\x08\x00" "ADC_JDR3")
Q(ADC_JDR4, (const byte*)"\xf4\x43\x08\x00" "ADC_JDR4")
Q(ADC_JOFR1, (const byte*)"\xdc\xdd\x09\x00" "ADC_JOFR1")
Q(ADC_JOFR2, (const byte*)"\xdf\xdd\x09\x00" "ADC_JOFR2")
Q(ADC_JOFR3, (const byte*)"\xde\xdd\x09\x00" "ADC_JOFR3")
Q(ADC_JOFR4, (const byte*)"\xd9\xdd\x09\x00" "ADC_JOFR4")
Q(ADC_JSQR, (const byte*)"\x66\x00\x08\x00" "ADC_JSQR")
Q(ADC_LTR, (const byte*)"\xd6\xa0\x07\x00" "ADC_LTR")
Q(ADC_SMPR1, (const byte*)"\x51\xb7\x09\x00" "ADC_SMPR1")
Q(ADC_SMPR2, (const byte*)"\x52\xb7\x09\x00" "ADC_SMPR2")
Q(ADC_SQR1, (const byte*)"\xdd\xbd\x08\x00" "ADC_SQR1")
Q(ADC_SQR2, (const byte*)"\xde\xbd\x08\x00" "ADC_SQR2")
Q(ADC_SQR3, (const byte*)"\xdf\xbd\x08\x00" "ADC_SQR3")
Q(ADC_SR, (const byte*)"\x7d\xa0\x06\x00" "ADC_SR")
Q(CAN1, (const byte*)"\x98\xc0\x04\x00" "CAN1")
Q(CAN2, (const byte*)"\x9b\xc0\x04\x00" "CAN2")
Q(CRC, (const byte*)"\x37\xd1\x03\x00" "CRC")
Q(CRC_CR, (const byte*)"\x39\x22\x06\x00" "CRC_CR")
Q(CRC_DR, (const byte*)"\xde\x22\x06\x00" "CRC_DR")
Q(CRC_IDR, (const byte*)"\x57\x4e\x07\x00" "CRC_IDR")
Q(DAC_CR, (const byte*)"\x8d\x81\x06\x00" "DAC_CR")
Q(DAC_DHR12L1, (const byte*)"\xfc\x22\x0b\x00" "DAC_DHR12L1")
Q(DAC_DHR12L2, (const byte*)"\xff\x22\x0b\x00" "DAC_DHR12L2")
Q(DAC_DHR12LD, (const byte*)"\x89\x22\x0b\x00" "DAC_DHR12LD")
Q(DAC_DHR12R1, (const byte*)"\xa2\x23\x0b\x00" "DAC_DHR12R1")
Q(DAC_DHR12R2, (const byte*)"\xa1\x23\x0b\x00" "DAC_DHR12R2")
Q(DAC_DHR12RD, (const byte*)"\xd7\x23\x0b\x00" "DAC_DHR12RD")
Q(DAC_DHR8R1, (const byte*)"\x39\x97\x0a\x00" "DAC_DHR8R1")
Q(DAC_DHR8R2, (const byte*)"\x3a\x97\x0a\x00" "DAC_DHR8R2")
Q(DAC_DHR8RD, (const byte*)"\x4c\x97\x0a\x00" "DAC_DHR8RD")
Q(DAC_DOR1, (const byte*)"\x54\x90\x08\x00" "DAC_DOR1")
Q(DAC_DOR2, (const byte*)"\x57\x90\x08\x00" "DAC_DOR2")
Q(DAC_SR, (const byte*)"\x9d\x7f\x06\x00" "DAC_SR")
Q(DAC_SWTRIGR, (const byte*)"\x62\x88\x0b\x00" "DAC_SWTRIGR")
Q(DBGMCU_APB1FZ, (const byte*)"\x7e\x4a\x0d\x00" "DBGMCU_APB1FZ")
Q(DBGMCU_APB2FZ, (const byte*)"\x3d\x46\x0d\x00" "DBGMCU_APB2FZ")
Q(DBGMCU_CR, (const byte*)"\x11\xd1\x09\x00" "DBGMCU_CR")
Q(DBGMCU_IDCODE, (const byte*)"\xe0\x55\x0d\x00" "DBGMCU_IDCODE")
Q(DMA1, (const byte*)"\x1c\x2d\x04\x00" "DMA1")
Q(DMA2, (const byte*)"\x1f\x2d\x04\x00" "DMA2")
Q(DMA_HIFCR, (const byte*)"\x64\x8b\x09\x00" "DMA_HIFCR")
Q(DMA_HISR, (const byte*)"\xd2\xf9\x08\x00" "DMA_HISR")
Q(DMA_LIFCR, (const byte*)"\x60\xcb\x09\x00" "DMA_LIFCR")
Q(DMA_LISR, (const byte*)"\x56\x2b\x08\x00" "DMA_LISR")
Q(EXTI, (const byte*)"\x25\xc6\x04\x00" "EXTI")
Q(EXTI_EMR, (const byte*)"\x20\xb7\x08\x00" "EXTI_EMR")
Q(EXTI_FTSR, (const byte*)"\x29\xfd\x09\x00" "EXTI_FTSR")
Q(EXTI_IMR, (const byte*)"\x2c\x87\x08\x00" "EXTI_IMR")
Q(EXTI_PR, (const byte*)"\x98\x8e\x07\x00" "EXTI_PR")
Q(EXTI_RTSR, (const byte*)"\xbd\xab\x09\x00" "EXTI_RTSR")
Q(EXTI_SWIER, (const byte*)"\x80\xff\x0a\x00" "EXTI_SWIER")
Q(FLASH, (const byte*)"\x95\x50\x05\x00" "FLASH")
Q(FLASH_ACR, (const byte*)"\x5a\xaf\x09\x00" "FLASH_ACR")
Q(FLASH_CR, (const byte*)"\x5b\xee\x08\x00" "FLASH_CR")
Q(FLASH_KEYR, (const byte*)"\x6f\x49\x0a\x00" "FLASH_KEYR")
Q(FLASH_OPTCR, (const byte*)"\x10\x2c\x0b\x00" "FLASH_OPTCR")
Q(FLASH_OPTCR1, (const byte*)"\x21\xae\x0c\x00" "FLASH_OPTCR1")
Q(FLASH_OPTKEYR, (const byte*)"\x24\xa5\x0d\x00" "FLASH_OPTKEYR")
Q(FLASH_SR, (const byte*)"\x4b\xf0\x08\x00" "FLASH_SR")
Q(GPIOA, (const byte*)"\xd5\xe2\x05\x00" "GPIOA")
Q(GPIOB, (const byte*)"\xd6\xe2\x05\x00" "GPIOB")
Q(GPIOC, (const byte*)"\xd7\xe2\x05\x00" "GPIOC")
Q(GPIOD, (const byte*)"\xd0\xe2\x05\x00" "GPIOD")
Q(GPIOE, (const byte*)"\xd1\xe2\x05\x00" "GPIOE")
Q(GPIOF, (const byte*)"\xd2\xe2\x05\x00" "GPIOF")
Q(GPIOG, (const byte*)"\xd3\xe2\x05\x00" "GPIOG")
Q(GPIOH, (const byte*)"\xdc\xe2\x05\x00" "GPIOH")
Q(GPIOI, (const byte*)"\xdd\xe2\x05\x00" "GPIOI")
Q(GPIO_AFR0, (const byte*)"\xce\xee\x09\x00" "GPIO_AFR0")
Q(GPIO_AFR1, (const byte*)"\xcf\xee\x09\x00" "GPIO_AFR1")
Q(GPIO_BSRRH, (const byte*)"\x12\x71\x0a\x00" "GPIO_BSRRH")
Q(GPIO_BSRRL, (const byte*)"\x16\x71\x0a\x00" "GPIO_BSRRL")
Q(GPIO_IDR, (const byte*)"\xf4\xe5\x08\x00" "GPIO_IDR")
Q(GPIO_LCKR, (const byte*)"\xfd\x23\x09\x00" "GPIO_LCKR")
Q(GPIO_MODER, (const byte*)"\x7a\xd5\x0a\x00" "GPIO_MODER")
Q(GPIO_ODR, (const byte*)"\xf2\xdc\x08\x00" "GPIO_ODR")
Q(GPIO_OSPEEDR, (const byte*)"\x31\xe2\x0c\x00" "GPIO_OSPEEDR")
Q(GPIO_OTYPER, (const byte*)"\xee\x2e\x0b\x00" "GPIO_OTYPER")
Q(GPIO_PUPDR, (const byte*)"\x88\xf3\x0a\x00" "GPIO_PUPDR")
Q(I2C1, (const byte*)"\xcc\xca\x04\x00" "I2C1")
Q(I2C2, (const byte*)"\xcf\xca\x04\x00" "I2C2")
Q(I2C3, (const byte*)"\xce\xca\x04\x00" "I2C3")
Q(I2C_CCR, (const byte*)"\x90\x42\x07\x00" "I2C_CCR")
Q(I2C_CR1, (const byte*)"\xc2\x44\x07\x00" "I2C_CR1")
Q(I2C_CR2, (const byte*)"\xc1\x44\x07\x00" "I2C_CR2")
Q(I2C_DR, (const byte*)"\x34\xf3\x06\x00" "I2C_DR")
Q(I2C_FLTR, (const byte*)"\xee\x67\x08\x00" "I2C_FLTR")
Q(I2C_OAR1, (const byte*)"\xaf\x31\x08\x00" "I2C_OAR1")
Q(I2C_OAR2, (const byte*)"\xac\x31\x08\x00" "I2C_OAR2")
Q(I2C_SR1, (const byte*)"\xd2\x84\x07\x00" "I2C_SR1")
Q(I2C_SR2, (const byte*)"\xd1\x84\x07\x00" "I2C_SR2")
Q(I2C_TRISE, (const byte*)"\xdb\xd3\x09\x00" "I2C_TRISE")
Q(IWDG, (const byte*)"\xf8\x36\x04\x00" "IWDG")
Q(IWDG_KR, (const byte*)"\x1e\x24\x07\x00" "IWDG_KR")
Q(IWDG_PR, (const byte*)"\xe5\x25\x07\x00" "IWDG_PR")
Q(IWDG_RLR, (const byte*)"\x0b\xcc\x08\x00" "IWDG_RLR")
Q(IWDG_SR, (const byte*)"\x06\x25\x07\x00" "IWDG_SR")
Q(PWR, (const byte*)"\x50\x0d\x03\x00" "PWR")
Q(PWR_CR, (const byte*)"\x7e\xae\x06\x00" "PWR_CR")
Q(PWR_CSR, (const byte*)"\x0d\x7e\x07\x00" "PWR_CSR")
Q(RCC, (const byte*)"\x57\x07\x03\x00" "RCC")
Q(RCC_AHB1ENR, (const byte*)"\x6b\x01\x0b\x00" "RCC_AHB1ENR")
Q(RCC_AHB1LPENR, (const byte*)"\x77\x2b\x0d\x00" "RCC_AHB1LPENR")
Q(RCC_AHB1RSTR, (const byte*)"\xf5\xda\x0c\x00" "RCC_AHB1RSTR")
Q(RCC_AHB2ENR, (const byte*)"\x88\x6c\x0b\x00" "RCC_AHB2ENR")
Q(RCC_AHB2LPENR, (const byte*)"\x54\xba\x0d\x00" "RCC_AHB2LPENR")
Q(RCC_AHB2RSTR, (const byte*)"\x76\xea\x0c\x00" "RCC_AHB2RSTR")
Q(RCC_AHB3ENR, (const byte*)"\x29\xc8\x0b\x00" "RCC_AHB3ENR")
Q(RCC_AHB3LPENR, (const byte*)"\x35\x79\x0d\x00" "RCC_AHB3LPENR")
Q(RCC_AHB3RSTR, (const byte*)"\x77\x89\x0c\x00" "RCC_AHB3RSTR")
Q(RCC_APB1ENR, (const byte*)"\x73\x42\x0b\x00" "RCC_APB1ENR")
Q(RCC_APB1LPENR, (const byte*)"\x6f\x12\x0d\x00" "RCC_APB1LPENR")
Q(RCC_APB1RSTR, (const byte*)"\xed\x84\x0c\x00" "RCC_APB1RSTR")
Q(RCC_APB2ENR, (const byte*)"\x90\xad\x0b\x00" "RCC_APB2ENR")
Q(RCC_APB2LPENR, (const byte*)"\x4c\xa1\x0d\x00" "RCC_APB2LPENR")
Q(RCC_APB2RSTR, (const byte*)"\x6e\x94\x0c\x00" "RCC_APB2RSTR")
Q(RCC_BDCR, (const byte*)"\x1f\xdf\x08\x00" "RCC_BDCR")
Q(RCC_CFGR, (const byte*)"\x38\x83\x08\x00" "RCC_CFGR")
Q(RCC_CIR, (const byte*)"\x50\xbd\x07\x00" "RCC_CIR")
Q(RCC_CR, (const byte*)"\xd9\x24\x06\x00" "RCC_CR")
Q(RCC_PLLCFGR, (const byte*)"\x68\x4e\x0b\x00" "RCC_PLLCFGR")
Q(RCC_PLLI2SCFGR, (const byte*)"\x00\xb3\x0e\x00" "RCC_PLLI2SCFGR")
Q(RCC_SSCGR, (const byte*)"\x7e\x06\x09\x00" "RCC_SSCGR")
Q(RNG, (const byte*)"\xfe\x07\x03\x00" "RNG")
Q(RNG_CR, (const byte*)"\xd0\x8c\x06\x00" "RNG_CR")
Q(RNG_DR, (const byte*)"\xb7\x8c\x06\x00" "RNG_DR")
Q(RNG_SR, (const byte*)"\xc0\x8e\x06\x00" "RNG_SR")
Q(RTC_ALRMAR, (const byte*)"\x7e\xcd\x0a\x00" "RTC_ALRMAR")
Q(RTC_ALRMBR, (const byte*)"\xdd\xcd\x0a\x00" "RTC_ALRMBR")
Q(RTC_BKP0R, (const byte*)"\x84\xca\x09\x00" "RTC_BKP0R")
Q(RTC_BKP10R, (const byte*)"\xf5\x23\x0a\x00" "RTC_BKP10R")
Q(RTC_BKP11R, (const byte*)"\xd4\x23\x0a\x00" "RTC_BKP11R")
Q(RTC_BKP12R, (const byte*)"\x37\x23\x0a\x00" "RTC_BKP12R")
Q(RTC_BKP13R, (const byte*)"\x16\x23\x0a\x00" "RTC_BKP13R")
Q(RTC_BKP14R, (const byte*)"\x71\x23\x0a\x00" "RTC_BKP14R")
Q(RTC_BKP15R, (const byte*)"\x50\x23\x0a\x00" "RTC_BKP15R")
Q(RTC_BKP16R, (const byte*)"\xb3\x22\x0a\x00" "RTC_BKP16R")
Q(RTC_BKP17R, (const byte*)"\x92\x22\x0a\x00" "RTC_BKP17R")
Q(RTC_BKP18R, (const byte*)"\xfd\x24\x0a\x00" "RTC_BKP18R")
Q(RTC_BKP19R, (const byte*)"\xdc\x24\x0a\x00" "RTC_BKP19R")
Q(RTC_BKP1R, (const byte*)"\xa5\xca\x09\x00" "RTC_BKP1R")
Q(RTC_BKP2R, (const byte*)"\xc6\xca\x09\x00" "RTC_BKP2R")
Q(RTC_BKP3R, (const byte*)"\xe7\xca\x09\x00" "RTC_BKP3R")
Q(RTC_BKP4R, (const byte*)"\x00\xca\x09\x00" "RTC_BKP4R")
Q(RTC_BKP5R, (const byte*)"\x21\xca\x09\x00" "RTC_BKP5R")
Q(RTC_BKP6R, (const byte*)"\x42\xca\x09\x00" "RTC_BKP6R")
Q(RTC_BKP7R, (const byte*)"\x63\xca\x09\x00" "RTC_BKP7R")
Q(RTC_BKP8R, (const byte*)"\x8c\xcb\x09\x00" "RTC_BKP8R")
Q(RTC_BKP9R, (const byte*)"\xad\xcb\x09\x00" "RTC_BKP9R")
Q(RTC_CALIBR, (const byte*)"\x48\x1c\x0a\x00" "RTC_CALIBR")
Q(RTC_CALR, (const byte*)"\x83\x4d\x08\x00" "RTC_CALR")
Q(RTC_CR, (const byte*)"\x4e\xcc\x06\x00" "RTC_CR")
Q(RTC_DR, (const byte*)"\xa9\xcb\x06\x00" "RTC_DR")
Q(RTC_ISR, (const byte*)"\xf7\x2b\x07\x00" "RTC_ISR")
Q(RTC_PRER, (const byte*)"\xca\x44\x08\x00" "RTC_PRER")
Q(RTC_SHIFTR, (const byte*)"\x2d\x25\x0a\x00" "RTC_SHIFTR")
Q(RTC_SSR, (const byte*)"\x6d\x16\x07\x00" "RTC_SSR")
Q(RTC_TAFCR, (const byte*)"\x1d\x62\x09\x00" "RTC_TAFCR")
Q(RTC_TR, (const byte*)"\xb9\xc9\x06\x00" "RTC_TR")
Q(RTC_TSDR, (const byte*)"\x2e\x20\x08\x00" "RTC_TSDR")
Q(RTC_TSSSR, (const byte*)"\x4a\xe1\x09\x00" "RTC_TSSSR")
Q(RTC_TSTR, (const byte*)"\x3e\x1e\x08\x00" "RTC_TSTR")
Q(RTC_WPR, (const byte*)"\x8a\x04\x07\x00" "RTC_WPR")
Q(RTC_WUTR, (const byte*)"\x1b\xaa\x08\x00" "RTC_WUTR")
Q(SDIO, (const byte*)"\x94\x82\x04\x00" "SDIO")
Q(SPI1, (const byte*)"\xfe\x4f\x04\x00" "SPI1")
Q(SPI2, (const byte*)"\xfd\x4f\x04\x00" "SPI2")
Q(SPI3, (const byte*)"\xfc\x4f\x04\x00" "SPI3")
Q(SPI_CR1, (const byte*)"\xb0\x08\x07\x00" "SPI_CR1")
Q(SPI_CR2, (const byte*)"\xb3\x08\x07\x00" "SPI_CR2")
Q(SPI_CRCPR, (const byte*)"\xc0\x4b\x09\x00" "SPI_CRCPR")
Q(SPI_DR, (const byte*)"\x06\x7c\x06\x00" "SPI_DR")
Q(SPI_I2SCFGR, (const byte*)"\x28\x2f\x0b\x00" "SPI_I2SCFGR")
Q(SPI_I2SPR, (const byte*)"\x7a\x8a\x09\x00" "SPI_I2SPR")
Q(SPI_RXCRCR, (const byte*)"\x1a\x5f\x0a\x00" "SPI_RXCRCR")
Q(SPI_SR, (const byte*)"\x71\x7a\x06\x00" "SPI_SR")
Q(SPI_TXCRCR, (const byte*)"\xdc\xb1\x0a\x00" "SPI_TXCRCR")
Q(SYSCFG, (const byte*)"\xde\x81\x06\x00" "SYSCFG")
Q(SYSCFG_CMPCR, (const byte*)"\x2e\xdb\x0c\x00" "SYSCFG_CMPCR")
Q(SYSCFG_EXTICR0, (const byte*)"\xe0\x6d\x0e\x00" "SYSCFG_EXTICR0")
Q(SYSCFG_EXTICR1, (const byte*)"\xe1\x6d\x0e\x00" "SYSCFG_EXTICR1")
Q(SYSCFG_EXTICR2, (const byte*)"\xe2\x6d\x0e\x00" "SYSCFG_EXTICR2")
Q(SYSCFG_EXTICR3, (const byte*)"\xe3\x6d\x0e\x00" "SYSCFG_EXTICR3")
Q(SYSCFG_MEMRMP, (const byte*)"\xab\x46\x0d\x00" "SYSCFG_MEMRMP")
Q(SYSCFG_PMC, (const byte*)"\x5f\x9f\x0a\x00" "SYSCFG_PMC")
Q(TIM1, (const byte*)"\x84\xe1\x04\x00" "TIM1")
Q(TIM10, (const byte*)"\x34\x12\x05\x00" "TIM10")
Q(TIM11, (const byte*)"\x35\x12\x05\x00" "TIM11")
Q(TIM12, (const byte*)"\x36\x12\x05\x00" "TIM12")
Q(TIM13, (const byte*)"\x37\x12\x05\x00" "TIM13")
Q(TIM14, (const byte*)"\x30\x12\x05\x00" "TIM14")
Q(TIM2, (const byte*)"\x87\xe1\x04\x00" "TIM2")
Q(TIM3, (const byte*)"\x86\xe1\x04\x00" "TIM3")
Q(TIM4, (const byte*)"\x81\xe1\x04\x00" "TIM4")
Q(TIM5, (const byte*)"\x80\xe1\x04\x00" "TIM5")
Q(TIM6, (const byte*)"\x83\xe1\x04\x00" "TIM6")
Q(TIM7, (const byte*)"\x82\xe1\x04\x00" "TIM7")
Q(TIM8, (const byte*)"\x8d\xe1\x04\x00" "TIM8")
Q(TIM9, (const byte*)"\x8c\xe1\x04\x00" "TIM9")
Q(TIM_ARR, (const byte*)"\xeb\x9f\x07\x00" "TIM_ARR")
Q(TIM_BDTR, (const byte*)"\xaa\xd0\x08\x00" "TIM_BDTR")
Q(TIM_CCER, (const byte*)"\x7d\x70\x08\x00" "TIM_CCER")
Q(TIM_CCMR1, (const byte*)"\x24\x5e\x09\x00" "TIM_CCMR1")
Q(TIM_CCMR2, (const byte*)"\x27\x5e\x09\x00" "TIM_CCMR2")
Q(TIM_CCR1, (const byte*)"\x69\x71\x08\x00" "TIM_CCR1")
Q(TIM_CCR2, (const byte*)"\x6a\x71\x08\x00" "TIM_CCR2")
Q(TIM_CCR3, (const byte*)"\x6b\x71\x08\x00" "TIM_CCR3")
Q(TIM_CCR4, (const byte*)"\x6c\x71\x08\x00" "TIM_CCR4")
Q(TIM_CNT, (const byte*)"\xf3\xa5\x07\x00" "TIM_CNT")
Q(TIM_CR1, (const byte*)"\x0a\xa8\x07\x00" "TIM_CR1")
Q(TIM_CR2, (const byte*)"\x09\xa8\x07\x00" "TIM_CR2")
Q(TIM_DCR, (const byte*)"\x5f\xbb\x07\x00" "TIM_DCR")
Q(TIM_DIER, (const byte*)"\x10\xfa\x08\x00" "TIM_DIER")
Q(TIM_DMAR, (const byte*)"\x90\xe9\x08\x00" "TIM_DMAR")
Q(TIM_EGR, (const byte*)"\x5a\xae\x07\x00" "TIM_EGR")
Q(TIM_OR, (const byte*)"\x57\x0c\x06\x00" "TIM_OR")
Q(TIM_PSC, (const byte*)"\x4a\xec\x07\x00" "TIM_PSC")
Q(TIM_RCR, (const byte*)"\xc9\xd5\x07\x00" "TIM_RCR")
Q(TIM_SMCR, (const byte*)"\xa5\x0b\x08\x00" "TIM_SMCR")
Q(TIM_SR, (const byte*)"\xcb\x0e\x06\x00" "TIM_SR")
Q(UART4, (const byte*)"\xa3\x50\x05\x00" "UART4")
Q(UART5, (const byte*)"\xa2\x50\x05\x00" "UART5")
Q(USART1, (const byte*)"\x35\x5b\x06\x00" "USART1")
Q(USART2, (const byte*)"\x36\x5b\x06\x00" "USART2")
Q(USART3, (const byte*)"\x37\x5b\x06\x00" "USART3")
Q(USART6, (const byte*)"\x32\x5b\x06\x00" "USART6")
Q(USART_BRR, (const byte*)"\xf9\x6f\x09\x00" "USART_BRR")
Q(USART_CR1, (const byte*)"\xdb\x5a\x09\x00" "USART_CR1")
Q(USART_CR2, (const byte*)"\xd8\x5a\x09\x00" "USART_CR2")
Q(USART_CR3, (const byte*)"\xd9\x5a\x09\x00" "USART_CR3")
Q(USART_DR, (const byte*)"\x8d\xa6\x08\x00" "USART_DR")
Q(USART_GTPR, (const byte*)"\x2a\xda\x0a\x00" "USART_GTPR")
Q(USART_SR, (const byte*)"\xba\xa3\x08\x00" "USART_SR")
Q(WWDG, (const byte*)"\x26\x29\x04\x00" "WWDG")
Q(WWDG_CFR, (const byte*)"\x4e\x8b\x08\x00" "WWDG_CFR")
Q(WWDG_CR, (const byte*)"\x88\x97\x07\x00" "WWDG_CR")
Q(WWDG_SR, (const byte*)"\x98\x95\x07\x00" "WWDG_SR")
Q(A0, (const byte*)"\x54\x72\x02\x00" "A0")
Q(A1, (const byte*)"\x55\x72\x02\x00" "A1")
Q(A13, (const byte*)"\xc6\xbc\x03\x00" "A13")
Q(A14, (const byte*)"\xc1\xbc\x03\x00" "A14")
Q(A15, (const byte*)"\xc0\xbc\x03\x00" "A15")
Q(A2, (const byte*)"\x56\x72\x02\x00" "A2")
Q(A3, (const byte*)"\x57\x72\x02\x00" "A3")
Q(A4, (const byte*)"\x50\x72\x02\x00" "A4")
Q(A5, (const byte*)"\x51\x72\x02\x00" "A5")
Q(A6, (const byte*)"\x52\x72\x02\x00" "A6")
Q(A7, (const byte*)"\x53\x72\x02\x00" "A7")
Q(A8, (const byte*)"\x5c\x72\x02\x00" "A8")
Q(AF1_TIM1, (const byte*)"\x6d\x8f\x08\x00" "AF1_TIM1")
Q(AF1_TIM2, (const byte*)"\x6e\x8f\x08\x00" "AF1_TIM2")
Q(AF2_TIM3, (const byte*)"\x8c\x5f\x08\x00" "AF2_TIM3")
Q(AF2_TIM4, (const byte*)"\x8b\x5f\x08\x00" "AF2_TIM4")
Q(AF2_TIM5, (const byte*)"\x8a\x5f\x08\x00" "AF2_TIM5")
Q(AF3_TIM10, (const byte*)"\x3f\x25\x09\x00" "AF3_TIM10")
Q(AF3_TIM11, (const byte*)"\x3e\x25\x09\x00" "AF3_TIM11")
Q(AF3_TIM8, (const byte*)"\x26\x3f\x08\x00" "AF3_TIM8")
Q(AF3_TIM9, (const byte*)"\x27\x3f\x08\x00" "AF3_TIM9")
Q(AF4_I2C1, (const byte*)"\x00\xb2\x08\x00" "AF4_I2C1")
Q(AF4_I2C2, (const byte*)"\x03\xb2\x08\x00" "AF4_I2C2")
Q(AF4_I2C3, (const byte*)"\x02\xb2\x08\x00" "AF4_I2C3")
Q(AF5_SPI1, (const byte*)"\x93\x1b\x08\x00" "AF5_SPI1")
Q(AF5_SPI2, (const byte*)"\x90\x1b\x08\x00" "AF5_SPI2")
Q(AF6_SPI3, (const byte*)"\xf2\x99\x08\x00" "AF6_SPI3")
Q(AF7_USART1, (const byte*)"\xda\x19\x0a\x00" "AF7_USART1")
Q(AF7_USART2, (const byte*)"\xd9\x19\x0a\x00" "AF7_USART2")
Q(AF7_USART3, (const byte*)"\xd8\x19\x0a\x00" "AF7_USART3")
Q(AF8_UART4, (const byte*)"\x63\xd6\x09\x00" "AF8_UART4")
Q(AF8_USART6, (const byte*)"\x72\x07\x0a\x00" "AF8_USART6")
Q(AF9_TIM12, (const byte*)"\x37\x5b\x09\x00" "AF9_TIM12")
Q(AF9_TIM13, (const byte*)"\x36\x5b\x09\x00" "AF9_TIM13")
Q(AF9_TIM14, (const byte*)"\x31\x5b\x09\x00" "AF9_TIM14")
Q(AMISO, (const byte*)"\xfc\x81\x05\x00" "AMISO")
Q(AMOSI, (const byte*)"\x7c\x8a\x05\x00" "AMOSI")
Q(ASCK, (const byte*)"\x9f\xe3\x04\x00" "ASCK")
Q(B0, (const byte*)"\xf7\x72\x02\x00" "B0")
Q(B1, (const byte*)"\xf6\x72\x02\x00" "B1")
Q(B10, (const byte*)"\x86\xd1\x03\x00" "B10")
Q(B11, (const byte*)"\x87\xd1\x03\x00" "B11")
Q(B12, (const byte*)"\x84\xd1\x03\x00" "B12")
Q(B13, (const byte*)"\x85\xd1\x03\x00" "B13")
Q(B14, (const byte*)"\x82\xd1\x03\x00" "B14")
Q(B15, (const byte*)"\x83\xd1\x03\x00" "B15")
Q(B3, (const byte*)"\xf4\x72\x02\x00" "B3")
Q(B4, (const byte*)"\xf3\x72\x02\x00" "B4")
Q(B5, (const byte*)"\xf2\x72\x02\x00" "B5")
Q(B6, (const byte*)"\xf1\x72\x02\x00" "B6")
Q(B7, (const byte*)"\xf0\x72\x02\x00" "B7")
Q(B8, (const byte*)"\xff\x72\x02\x00" "B8")
Q(B9, (const byte*)"\xfe\x72\x02\x00" "B9")
Q(BATT_ADC, (const byte*)"\x7f\x8f\x08\x00" "BATT_ADC")
Q(BTPIN, (const byte*)"\xc4\x82\x05\x00" "BTPIN")
Q(BTRST, (const byte*)"\x86\x6a\x05\x00" "BTRST")
Q(C0, (const byte*)"\x96\x72\x02\x00" "C0")
Q(C1, (const byte*)"\x97\x72\x02\x00" "C1")
Q(C13, (const byte*)"\x44\xc5\x03\x00" "C13")
Q(C2, (const byte*)"\x94\x72\x02\x00" "C2")
Q(C3, (const byte*)"\x95\x72\x02\x00" "C3")
Q(C4, (const byte*)"\x92\x72\x02\x00" "C4")
Q(C5, (const byte*)"\x93\x72\x02\x00" "C5")
Q(C6, (const byte*)"\x90\x72\x02\x00" "C6")
Q(C7, (const byte*)"\x91\x72\x02\x00" "C7")
Q(CHR_CHG, (const byte*)"\xcf\x1d\x07\x00" "CHR_CHG")
Q(CHR_PG, (const byte*)"\x74\x8f\x06\x00" "CHR_PG")
Q(CS_ADC, (const byte*)"\x8c\x12\x06\x00" "CS_ADC")
Q(CS_DAC, (const byte*)"\x6c\x1f\x06\x00" "CS_DAC")
Q(LED_B, (const byte*)"\xf5\x28\x05\x00" "LED_B")
Q(LED_G, (const byte*)"\xf0\x28\x05\x00" "LED_G")
Q(LED_R, (const byte*)"\xe5\x28\x05\x00" "LED_R")
Q(MUX1_A0, (const byte*)"\x1a\xe4\x07\x00" "MUX1_A0")
Q(MUX1_A1, (const byte*)"\x1b\xe4\x07\x00" "MUX1_A1")
Q(MUX1_EN, (const byte*)"\xe0\xe4\x07\x00" "MUX1_EN")
Q(MUX2A0, (const byte*)"\xc6\x03\x06\x00" "MUX2A0")
Q(MUX2A1, (const byte*)"\xc7\x03\x06\x00" "MUX2A1")
Q(MUX2EN, (const byte*)"\x3c\x03\x06\x00" "MUX2EN")
Q(MUX3A0, (const byte*)"\xc7\xff\x06\x00" "MUX3A0")
Q(MUX3A1, (const byte*)"\xc6\xff\x06\x00" "MUX3A1")
Q(PIN_BOOTSET, (const byte*)"\xb9\xa5\x0b\x00" "PIN_BOOTSET")
Q(PIN_OFF, (const byte*)"\xa2\xdc\x07\x00" "PIN_OFF")
Q(PIN_RESET, (const byte*)"\x38\x15\x09\x00" "PIN_RESET")
Q(PWR_ANALOG, (const byte*)"\x25\x9c\x0a\x00" "PWR_ANALOG")
Q(SW, (const byte*)"\xe1\x74\x02\x00" "SW")
Q(WIFIFCAH, (const byte*)"\xd8\xc3\x08\x00" "WIFIFCAH")
Q(WIFIRST, (const byte*)"\x81\x60\x07\x00" "WIFIRST")
